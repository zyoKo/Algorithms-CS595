Implement closest pair algorithm using divide and conquer.


1) your code should take care of special case when x-ordering cannot split
the given set into 2 non-empty sets, like in
(1,0) (1,1) (1,2)
all 3 points are on one vertical line, so x-ordering (by vertical line) 
cannot split the set. Switch to y-ordering (by horizontal line).
Notice that when neither of the 2 ordering can split, you have a special case:
all points in the set are equal - thus distance is 0.

To submit:
closestpair.cpp

Data files:
points5     500 points (test11)
points6  10,000 points (test12)
points7  25,000 points (test13)
points8  50,000 points (test14)
points9 500,000 points (test15)

Times (extended base cases - upto 5 points):
test 13 0.024s
test 14 0.049s
test 15 0.494s

If you use inefficient implementation - all pairs checked when combining "left" and "right" solutions:
test13 0.858s
test14 3.921s
test15 >5 mins


CPU info:
processor   : 1
vendor_id   : GenuineIntel
cpu family  : 6
model       : 15
model name  : Intel(R) Core(TM)2 CPU          6600  @ 2.40GHz
stepping    : 6
cpu MHz     : 1596.000
cache size  : 4096 KB
